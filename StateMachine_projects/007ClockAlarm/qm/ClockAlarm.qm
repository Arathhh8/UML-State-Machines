<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <framework name="qpn"/>
 <package name="HSMs" stereotype="0x02">
  <class name="Clock_Alarm" superclass="qpn::QHsm">
   <attribute name="curr_time" type="uint32_t" visibility="0x02" properties="0x01"/>
   <attribute name="temp_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_status" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="time_mode" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="obj" type="Clock_Alarm" visibility="0x02" properties="0x01"/>
   <operation name="get_curr_time" type="uint32_t" visibility="0x00" properties="0x01">
    <documentation>This returnsthe value of curr_time</documentation>
   </operation>
   <operation name="update_curr_time" type="void" visibility="0x00" properties="0x01">
    <code>if(++Clock_Alarm_curr_time == MAX_TIME){
    Clock_Alarm_curr_time = 0;
}</code>
   </operation>
   <operation name="set_curr_time" type="void" visibility="0x00" properties="0x01">
    <parameter name="new_curr_time" type="uint32_t"/>
    <code>uint8_t save_reg = SREG;
cli();
Clock_Alarm_curr_time = new_curr_time;
SREG = save_reg;</code>
   </operation>
   <operation name="display_curr_time" type="void" visibility="0x00" properties="0x00">
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;
uint32_t time_;

uint32_t time24h = Clock_Alarm_get_curr_time()/10; //convert to number of seconds 
uint8_t ss = time24h % 10U;       //extract sub-second to append later

time_ = (me-&gt;time_mode == MODE_24H)?time24h:convert_24hformat_to_12h(time24h);
time_as_string = integertime_to_string(time_); //hh:mm:ss
time_as_string.concat('.');
time_as_string.concat(ss);

/*if mode is 12H , concatenate  am/pm information */
if(me-&gt;time_mode == MODE_12H){
    time_as_string.concat(' ');
    time_as_string.concat(get_am_or_pm(time24h));
}

display_write(time_as_string,row,col);
</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1/2">
     <action>Clock_Alarm_set_curr_time(INITIAL_CURR_TIME);
me-&gt;alarm_time = INITIAL_ALARM_TIME;
me-&gt;time_mode = MODE_12;
me-&gt;alarm_status = ALARM_OFF;</action>
     <initial_glyph conn="4,3,5,3,12,27,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Clock">
     <history type="deep" target="../2">
      <history_glyph conn="9,51,3,2,12,-12"/>
     </history>
     <tran trig="ALARM" target="../../2">
      <tran_glyph conn="64,81,2,0,8">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Ticking">
      <entry brief="display_the_curr_time">Clock_Alarm_display_curr_time(me,TICKING_CURR_TIME_ROW, TICKING_CURR_TIME_COL)</entry>
      <tran trig="SET" target="../../3/2">
       <tran_glyph conn="48,27,1,3,28">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../3/3">
       <tran_glyph conn="48,34,1,3,12,23,16">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="18,20,30,19">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="Settings">
      <tran trig="ABRT" target="../../2">
       <tran_glyph conn="65,64,3,2,-23,-25">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../2">
       <tran_glyph conn="65,71,3,2,-36,-32">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="Clock_Setting">
       <state_glyph node="76,20,30,19"/>
      </state>
      <state name="Alarm_Setting">
       <state_glyph node="76,48,30,19"/>
      </state>
      <state_glyph node="65,10,50,66"/>
     </state>
     <state_glyph node="9,6,117,75"/>
    </state>
    <state name="Alarm_Notify">
     <tran trig="OK" target="../../1" cpref="../../1/0">
      <tran_glyph conn="50,95,3,3,-46,-44,4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="50,89,30,19"/>
    </state>
    <state_diagram size="167,112"/>
   </statechart>
  </class>
  <operation name="Clock_Alarm_ctor" type="void" visibility="0x00" properties="0x00">
   <code>QHsm_ctor(&amp;Clock_Alarm_obj.super, Q_STATE_CAST(&amp;Clock_Alarm_initial));</code>
  </operation>
  <directory name="../src">
   <file name="ClockAlarm_SM.cpp">
    <text>#include&lt;Arduino.h&gt;
#include &quot;qpn.h&quot;
#include &quot;lcd.h&quot;
#include &quot;ClockAlarm_SM.h&quot;

$declare${HSMs::Clock_Alarm}
$define${HSMs::Clock_Alarm_ctor}
$define${HSMs::Clock_Alarm} 


ISR(TIMER1_COMPA_vect){
    Clock_Alarm_update_curr_time();
}
</text>
   </file>
   <file name="ClockAlarm_SM.h">
    <text>#ifndef CLOCK_ALARM_H
#define CLOCK_ALARM_H


enum ClockAlarm_Signals{

    SET_SIG = Q_USER_SIG,
    OK_SIG,
    ABRT_SIG,
    ALARM_SIG,
    TICK_SIG,
    MAX_SIG
};

enum time_mode{
    MODE_24H,
    MODE_12
};

enum alarm_status{
    ALARM_OFF,
    ALARM_ON
};

#define MAX_TIME (864000UL)
#define INITIAL_CURR_TIME ((10UL * 3600UL + 10UL * 60UL + 10UL) * 10UL)
#define INITIAL_ALARM_TIME ((8UL * 3600UL )

#define TICKING_CURR_TIME_ROW     0
#define TICKING_CURR_TIME_COL     3


$declare${HSMs::Clock_Alarm_ctor}


#endif</text>
   </file>
  </directory>
 </package>
</model>
